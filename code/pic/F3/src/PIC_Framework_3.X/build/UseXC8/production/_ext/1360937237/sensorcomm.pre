
# 1 "../src/sensorcomm.c"

# 8 "../src/../../../../common/communication/../sensor_types.h"
typedef char uint8;
typedef short uint16;


typedef struct {
uint8 data;
} sensorADData;

# 10 "../src/../../../../common/communication/../../pic/F3/src/src/messages.h"
typedef struct __msg {
unsigned char full;
unsigned char length;
unsigned char msgtype;
unsigned char data[10];
} msg;

typedef struct __msg_queue {
msg queue[4];
unsigned char cur_write_ind;
unsigned char cur_read_ind;
} msg_queue;

# 43
void init_queues(void);



void SleepIfOkay(void);



void block_on_To_msgqueues(void);

# 57
signed char ToMainLow_sendmsg(unsigned char,unsigned char,void *);
signed char ToMainLow_recvmsg(unsigned char,unsigned char *,void *);

# 64
signed char ToMainHigh_sendmsg(unsigned char,unsigned char,void *);
signed char ToMainHigh_recvmsg(unsigned char,unsigned char *,void *);

# 71
signed char FromMainLow_sendmsg(unsigned char,unsigned char,void *);
signed char FromMainLow_recvmsg(unsigned char,unsigned char *,void *);

# 78
signed char FromMainHigh_sendmsg(unsigned char,unsigned char,void *);
signed char FromMainHigh_recvmsg(unsigned char,unsigned char *,void *);

# 7 "../src/../../../../common/communication/../../pic/F3/src/src/my_i2c.h"
typedef struct __i2c_comm {
unsigned char buffer[10];
unsigned char buflen;
unsigned char event_count;
unsigned char status;
unsigned char error_code;
unsigned char error_count;
unsigned char outbuffer[10];
unsigned char outbuflen;
unsigned char outbufind;
unsigned char slave_addr;
} i2c_comm;

# 32
void init_i2c(i2c_comm *);
void i2c_int_handler(void);
void start_i2c_slave_reply(unsigned char,unsigned char *);
void i2c_configure_slave(unsigned char);
void i2c_configure_master(unsigned char);
unsigned char i2c_master_send(unsigned char,unsigned char *);
unsigned char i2c_master_recv(unsigned char);

# 10 "../src/../../../../common/communication/brain_rover.h"
typedef struct {
uint8 flags;
uint8 sensorMask;
} BrainMsg;

typedef struct {
int (*adFunc)(sensorADData* data, int len);
} RoverMsgRouter;

# 24
int packADData(sensorADData* data, int len, char* out, int maxout);
int unpackRoverMsg(char* in, int len, RoverMsgRouter* handler);
void packBrainMsgRequest(BrainMsg* dest, uint8 sensorMask);
BrainMsg* unpackBrainMsg(char *buf);

# 33
typedef struct {
uint8 flags;
uint8 sensorID;



uint8 payloadLen;
char payload[10 - 3];
} RoverMsg;

# 10 "../src/sensorcomm.h"
void setBrainReqData(char* msg);
void sendRequestedData();
void sendADdata(sensorADData*data, int len);

# 8 "../src/testAD.h"
uint8 reqADData(sensorADData* buf);

# 8 "../src/debug.h"
enum {DBG1, DBG2, DBG3, DBG4, DBG5};

void setDBG(unsigned char );
void resetDBG(unsigned char );
void flipDBG(unsigned char );

# 13 "../src/sensorcomm.c"
static BrainMsg *BrainMsgRecv;

void setBrainReqData(char* buf){

# 19
BrainMsgRecv = unpackBrainMsg(buf);
}

void sendRequestedData(){
if(BrainMsgRecv->flags == 1){
if(BrainMsgRecv->sensorMask == 0){

sensorADData data[10];
uint8 len = reqADData(data);

# 31
sendADdata(data, len);

}
}
}

void sendADdata(sensorADData*data, int len) {
char outBuff[100];
int bytes_packed = packADData(data, len, outBuff, 100);
if(bytes_packed == 0){

}
else{
start_i2c_slave_reply(bytes_packed, outBuff);
}
}

