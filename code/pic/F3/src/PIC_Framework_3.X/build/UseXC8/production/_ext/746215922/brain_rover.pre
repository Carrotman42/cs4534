
# 1 "../../../../common/communication/brain_rover.c"

# 8 "../../../../common/communication/../sensor_types.h"
typedef char uint8;
typedef short uint16;


typedef struct {
uint8 data;
} sensorADData;

# 10 "../../../../common/communication/brain_rover.h"
typedef struct {
uint8 flags;
uint8 sensorMask;
} BrainMsg;

typedef struct {
int (*adFunc)(sensorADData* data, int len);
} RoverMsgRouter;

# 24
int packADData(sensorADData* data, int len, char* out, int maxout);
int unpackRoverMsg(char* in, int len, RoverMsgRouter* handler);
void packBrainMsgRequest(BrainMsg* dest, uint8 sensorMask);
BrainMsg* unpackBrainMsg(char *buf);

# 34
typedef struct {
uint8 flags;
uint8 sensorID;



uint8 payloadLen;



char payload[];
} RoverMsg;

# 8 "../../../../common/communication/../../pic/F3/src/src/debug.h"
enum {DBG1, DBG2, DBG3, DBG4, DBG5};

void setDBG(unsigned char );
void resetDBG(unsigned char );
void flipDBG(unsigned char );
void debugNum(int );

# 10 "../../../../common/communication/brain_rover.c"
void packBrainMsgRequest(BrainMsg* dest, uint8 sensorMask) {
dest->flags = 1;
dest->sensorMask = sensorMask;
}



static int packReturnData(char* data, int payloadLen, RoverMsg* msg, int maxout, int sensorID) {
if (payloadLen + 3 >= maxout) {
return 0;
}

msg->flags = 1;
msg->sensorID = sensorID;
msg->payloadLen = payloadLen;

char* dest = msg->payload;
char* end = dest + payloadLen;
while (dest != end) {
*dest++ = *data++;
}
return payloadLen + 3;
}

# 38
int packADData(sensorADData* data, int len, char* out, int maxout) {
return packReturnData((char*)data, len*sizeof(sensorADData), (RoverMsg*)out, maxout, 0);
}

BrainMsg* unpackBrainMsg(char *buf){
return (BrainMsg*) buf;
}


int unpackRoverMsg(char* in, int len, RoverMsgRouter* handler) {
RoverMsg* msg = (RoverMsg*)in;
len -= sizeof(RoverMsg);

if (len != msg->payloadLen) return 3;

if (msg->flags & 1) {
switch (msg->sensorID) {
case 0:
return handler->adFunc((sensorADData*)(msg->payload), len/sizeof(sensorADData));
default:

return 2;
}
} else {

return 1;
}
}
