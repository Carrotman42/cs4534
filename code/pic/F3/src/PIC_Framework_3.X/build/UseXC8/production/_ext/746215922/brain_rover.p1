Version 3.2 HI-TECH Software Intermediate Code
[s S2 `uc 1 `uc 1 ]
[n S2 . flags sensorMask ]
[s S4 `uc 1 `uc 1 `uc 1 `uc -> 0 `x ]
[n S4 . flags sensorID payloadLen payload ]
[s S1 `uc 1 ]
[n S1 . data ]
[v F12 `(i ~T0 @X0 0 tf2`*S1`i ]
[s S3 `*F12 1 ]
[n S3 . adFunc ]
[; ;sensor_types.h: 8: typedef char uint8;
[; ;sensor_types.h: 9: typedef short uint16;
[; ;sensor_types.h: 12: typedef struct {
[; ;sensor_types.h: 13: uint8 data;
[; ;sensor_types.h: 14: } sensorADData;
[; ;brain_rover.h: 10: typedef struct {
[; ;brain_rover.h: 11: uint8 flags;
[; ;brain_rover.h: 12: uint8 sensorMask;
[; ;brain_rover.h: 13: } BrainMsg;
[; ;brain_rover.h: 15: typedef struct {
[; ;brain_rover.h: 16: int (*adFunc)(sensorADData* data, int len);
[; ;brain_rover.h: 17: } RoverMsgRouter;
[; ;brain_rover.h: 24: int packADData(sensorADData* data, int len, char* out, int maxout);
[; ;brain_rover.h: 25: int unpackRoverMsg(char* in, int len, RoverMsgRouter* handler);
[; ;brain_rover.h: 26: void packBrainMsgRequest(BrainMsg* dest, uint8 sensorMask);
[; ;brain_rover.h: 27: BrainMsg* unpackBrainMsg(char *buf);
[; ;brain_rover.h: 34: typedef struct {
[; ;brain_rover.h: 35: uint8 flags;
[; ;brain_rover.h: 36: uint8 sensorID;
[; ;brain_rover.h: 40: uint8 payloadLen;
[; ;brain_rover.h: 44: char payload[];
[; ;brain_rover.h: 45: } RoverMsg;
[; ;debug.h: 8: enum {DBG1, DBG2, DBG3, DBG4, DBG5};
[; ;debug.h: 10: void setDBG(unsigned char );
[; ;debug.h: 11: void resetDBG(unsigned char );
[; ;debug.h: 12: void flipDBG(unsigned char );
[; ;debug.h: 13: void debugNum(int );
"10 ../../../../common/communication/brain_rover.c
[v _packBrainMsgRequest `(v ~T0 @X0 1 ef2`*S2`uc ]
{
[; ;brain_rover.c: 10: void packBrainMsgRequest(BrainMsg* dest, uint8 sensorMask) {
[e :U _packBrainMsgRequest ]
[v _dest `*S2 ~T0 @X0 1 r1 ]
[v _sensorMask `uc ~T0 @X0 1 r2 ]
[f ]
[; ;brain_rover.c: 11: dest->flags = 1;
"11
[e = . *U _dest 0 -> -> 1 `i `uc ]
[; ;brain_rover.c: 12: dest->sensorMask = sensorMask;
"12
[e = . *U _dest 1 _sensorMask ]
[; ;brain_rover.c: 13: }
"13
[e :UE 5 ]
}
"17
[v _packReturnData `(i ~T0 @X0 1 sf5`*uc`i`*S4`i`i ]
{
[; ;brain_rover.c: 17: static int packReturnData(char* data, int payloadLen, RoverMsg* msg, int maxout, int sensorID) {
[e :U _packReturnData ]
[v _data `*uc ~T0 @X0 1 r1 ]
[v _payloadLen `i ~T0 @X0 1 r2 ]
[v _msg `*S4 ~T0 @X0 1 r3 ]
[v _maxout `i ~T0 @X0 1 r4 ]
[v _sensorID `i ~T0 @X0 1 r5 ]
[f ]
[; ;brain_rover.c: 18: if (payloadLen + 3 >= maxout) {
"18
[e $ ! >= + _payloadLen -> 3 `i _maxout 7  ]
{
[; ;brain_rover.c: 19: return 0;
"19
[e ) -> 0 `i ]
[e $UE 6  ]
"20
}
[e :U 7 ]
[; ;brain_rover.c: 20: }
[; ;brain_rover.c: 22: msg->flags = 1;
"22
[e = . *U _msg 0 -> -> 1 `i `uc ]
[; ;brain_rover.c: 23: msg->sensorID = sensorID;
"23
[e = . *U _msg 1 -> _sensorID `uc ]
[; ;brain_rover.c: 24: msg->payloadLen = payloadLen;
"24
[e = . *U _msg 2 -> _payloadLen `uc ]
"26
[v _dest `*uc ~T0 @X0 1 a ]
[; ;brain_rover.c: 26: char* dest = msg->payload;
[e = _dest &U . *U _msg 3 ]
"27
[v _end `*uc ~T0 @X0 1 a ]
[; ;brain_rover.c: 27: char* end = dest + payloadLen;
[e = _end + _dest * -> _payloadLen `x -> -> # *U _dest `i `x ]
[; ;brain_rover.c: 28: while (dest != end) {
"28
[e $U 8  ]
[e :U 9 ]
{
[; ;brain_rover.c: 29: *dest++ = *data++;
"29
[e = *U ++ _dest * -> -> 1 `i `x -> -> # *U _dest `i `x *U ++ _data * -> -> 1 `i `x -> -> # *U _data `i `x ]
"30
}
[e :U 8 ]
"28
[e $ != _dest _end 9  ]
[e :U 10 ]
[; ;brain_rover.c: 30: }
[; ;brain_rover.c: 31: return payloadLen + 3;
"31
[e ) + _payloadLen -> 3 `i ]
[e $UE 6  ]
[; ;brain_rover.c: 32: }
"32
[e :UE 6 ]
}
"38
[v _packADData `(i ~T0 @X0 1 ef4`*S1`i`*uc`i ]
{
[; ;brain_rover.c: 38: int packADData(sensorADData* data, int len, char* out, int maxout) {
[e :U _packADData ]
[v _data `*S1 ~T0 @X0 1 r1 ]
[v _len `i ~T0 @X0 1 r2 ]
[v _out `*uc ~T0 @X0 1 r3 ]
[v _maxout `i ~T0 @X0 1 r4 ]
[f ]
[; ;brain_rover.c: 39: return packReturnData((char*)data, len*sizeof(sensorADData), (RoverMsg*)out, maxout, 0);
"39
[e ) ( _packReturnData (4 , , , , -> _data `*uc -> * -> _len `ui -> # `S1 `ui `i -> _out `*S4 _maxout -> 0 `i ]
[e $UE 11  ]
[; ;brain_rover.c: 40: }
"40
[e :UE 11 ]
}
"42
[v _unpackBrainMsg `(*S2 ~T0 @X0 1 ef1`*uc ]
{
[; ;brain_rover.c: 42: BrainMsg* unpackBrainMsg(char *buf){
[e :U _unpackBrainMsg ]
[v _buf `*uc ~T0 @X0 1 r1 ]
[f ]
[; ;brain_rover.c: 43: return (BrainMsg*) buf;
"43
[e ) -> _buf `*S2 ]
[e $UE 12  ]
[; ;brain_rover.c: 44: }
"44
[e :UE 12 ]
}
"47
[v _unpackRoverMsg `(i ~T0 @X0 1 ef3`*uc`i`*S3 ]
{
[; ;brain_rover.c: 47: int unpackRoverMsg(char* in, int len, RoverMsgRouter* handler) {
[e :U _unpackRoverMsg ]
[v _in `*uc ~T0 @X0 1 r1 ]
[v _len `i ~T0 @X0 1 r2 ]
[v _handler `*S3 ~T0 @X0 1 r3 ]
[f ]
"48
[v _msg `*S4 ~T0 @X0 1 a ]
[; ;brain_rover.c: 48: RoverMsg* msg = (RoverMsg*)in;
[e = _msg -> _in `*S4 ]
[; ;brain_rover.c: 49: len -= sizeof(RoverMsg);
"49
[e =- _len -> -> # `S4 `ui `i ]
[; ;brain_rover.c: 53: len = msg->payloadLen;
"53
[e = _len -> . *U _msg 2 `i ]
[; ;brain_rover.c: 59: if (msg->flags & 1) {
"59
[e $ ! != & -> . *U _msg 0 `i -> 1 `i -> 0 `i 14  ]
{
[; ;brain_rover.c: 60: switch (msg->sensorID) {
"60
[e $U 16  ]
{
[; ;brain_rover.c: 61: case 0:
"61
[e :U 17 ]
[; ;brain_rover.c: 62: return handler->adFunc((sensorADData*)(msg->payload), len/sizeof(sensorADData));
"62
[e ) ( *U . *U _handler 0 (2 , -> &U . *U _msg 3 `*S1 -> / -> _len `ui -> # `S1 `ui `i ]
[e $UE 13  ]
[; ;brain_rover.c: 63: default:
"63
[e :U 18 ]
[; ;brain_rover.c: 65: return -2;
"65
[e ) -U -> 2 `i ]
[e $UE 13  ]
"66
}
[; ;brain_rover.c: 66: }
[e $U 15  ]
"60
[e :U 16 ]
[e [\ . *U _msg 1 , $ -> -> 0 `i `uc 17
 18 ]
"66
[e :U 15 ]
"67
}
[; ;brain_rover.c: 67: } else {
[e $U 19  ]
[e :U 14 ]
{
[; ;brain_rover.c: 69: return -1;
"69
[e ) -U -> 1 `i ]
[e $UE 13  ]
"70
}
[e :U 19 ]
[; ;brain_rover.c: 70: }
[; ;brain_rover.c: 71: }
"71
[e :UE 13 ]
}
