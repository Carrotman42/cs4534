Version 3.2 HI-TECH Software Intermediate Code
[s S5 `uc 1 `uc 1 ]
[n S5 . flags sensorMask ]
[s S7 `uc 1 `uc 1 `uc 1 `uc - -> 10 `i -> 3 `i ]
[n S7 . flags sensorID payloadLen payload ]
[s S1 `uc 1 ]
[n S1 . data ]
[v F89 `(i ~T0 @X0 0 tf2`*S1`i ]
[s S6 `*F89 1 ]
[n S6 . adFunc ]
[; ;sensor_types.h: 8: typedef char uint8;
[; ;sensor_types.h: 9: typedef short uint16;
[; ;sensor_types.h: 12: typedef struct {
[; ;sensor_types.h: 13: uint8 data;
[; ;sensor_types.h: 14: } sensorADData;
[; ;messages.h: 10: typedef struct __msg {
[; ;messages.h: 11: unsigned char full;
[; ;messages.h: 12: unsigned char length;
[; ;messages.h: 13: unsigned char msgtype;
[; ;messages.h: 14: unsigned char data[10];
[; ;messages.h: 15: } msg;
[; ;messages.h: 17: typedef struct __msg_queue {
[; ;messages.h: 18: msg queue[4];
[; ;messages.h: 19: unsigned char cur_write_ind;
[; ;messages.h: 20: unsigned char cur_read_ind;
[; ;messages.h: 21: } msg_queue;
[; ;messages.h: 43: void init_queues(void);
[; ;messages.h: 47: void SleepIfOkay(void);
[; ;messages.h: 51: void block_on_To_msgqueues(void);
[; ;messages.h: 57: signed char ToMainLow_sendmsg(unsigned char,unsigned char,void *);
[; ;messages.h: 58: signed char ToMainLow_recvmsg(unsigned char,unsigned char *,void *);
[; ;messages.h: 64: signed char ToMainHigh_sendmsg(unsigned char,unsigned char,void *);
[; ;messages.h: 65: signed char ToMainHigh_recvmsg(unsigned char,unsigned char *,void *);
[; ;messages.h: 71: signed char FromMainLow_sendmsg(unsigned char,unsigned char,void *);
[; ;messages.h: 72: signed char FromMainLow_recvmsg(unsigned char,unsigned char *,void *);
[; ;messages.h: 78: signed char FromMainHigh_sendmsg(unsigned char,unsigned char,void *);
[; ;messages.h: 79: signed char FromMainHigh_recvmsg(unsigned char,unsigned char *,void *);
[; ;my_i2c.h: 7: typedef struct __i2c_comm {
[; ;my_i2c.h: 8: unsigned char buffer[10];
[; ;my_i2c.h: 9: unsigned char buflen;
[; ;my_i2c.h: 10: unsigned char event_count;
[; ;my_i2c.h: 11: unsigned char status;
[; ;my_i2c.h: 12: unsigned char error_code;
[; ;my_i2c.h: 13: unsigned char error_count;
[; ;my_i2c.h: 14: unsigned char outbuffer[10];
[; ;my_i2c.h: 15: unsigned char outbuflen;
[; ;my_i2c.h: 16: unsigned char outbufind;
[; ;my_i2c.h: 17: unsigned char slave_addr;
[; ;my_i2c.h: 18: } i2c_comm;
[; ;my_i2c.h: 32: void init_i2c(i2c_comm *);
[; ;my_i2c.h: 33: void i2c_int_handler(void);
[; ;my_i2c.h: 34: void start_i2c_slave_reply(unsigned char,unsigned char *);
[; ;my_i2c.h: 35: void i2c_configure_slave(unsigned char);
[; ;my_i2c.h: 36: void i2c_configure_master(unsigned char);
[; ;my_i2c.h: 37: unsigned char i2c_master_send(unsigned char,unsigned char *);
[; ;my_i2c.h: 38: unsigned char i2c_master_recv(unsigned char);
[; ;brain_rover.h: 10: typedef struct {
[; ;brain_rover.h: 11: uint8 flags;
[; ;brain_rover.h: 12: uint8 sensorMask;
[; ;brain_rover.h: 13: } BrainMsg;
[; ;brain_rover.h: 15: typedef struct {
[; ;brain_rover.h: 16: int (*adFunc)(sensorADData* data, int len);
[; ;brain_rover.h: 17: } RoverMsgRouter;
[; ;brain_rover.h: 24: int packADData(sensorADData* data, int len, char* out, int maxout);
[; ;brain_rover.h: 25: int unpackRoverMsg(char* in, int len, RoverMsgRouter* handler);
[; ;brain_rover.h: 26: void packBrainMsgRequest(BrainMsg* dest, uint8 sensorMask);
[; ;brain_rover.h: 27: BrainMsg* unpackBrainMsg(char *buf);
[; ;brain_rover.h: 33: typedef struct {
[; ;brain_rover.h: 34: uint8 flags;
[; ;brain_rover.h: 35: uint8 sensorID;
[; ;brain_rover.h: 39: uint8 payloadLen;
[; ;brain_rover.h: 40: char payload[10 - 3];
[; ;brain_rover.h: 41: } RoverMsg;
[; ;debug.h: 8: enum {DBG1, DBG2, DBG3, DBG4, DBG5};
[; ;debug.h: 10: void setDBG(unsigned char );
[; ;debug.h: 11: void resetDBG(unsigned char );
[; ;debug.h: 12: void flipDBG(unsigned char );
[; ;debug.h: 13: void readNum(int );
"10 ../../../../common/communication/brain_rover.c
[v _packBrainMsgRequest `(v ~T0 @X0 1 ef2`*S5`uc ]
{
[; ;brain_rover.c: 10: void packBrainMsgRequest(BrainMsg* dest, uint8 sensorMask) {
[e :U _packBrainMsgRequest ]
[v _dest `*S5 ~T0 @X0 1 r1 ]
[v _sensorMask `uc ~T0 @X0 1 r2 ]
[f ]
[; ;brain_rover.c: 11: dest->flags = 1;
"11
[e = . *U _dest 0 -> -> 1 `i `uc ]
[; ;brain_rover.c: 12: dest->sensorMask = sensorMask;
"12
[e = . *U _dest 1 _sensorMask ]
[; ;brain_rover.c: 13: }
"13
[e :UE 8 ]
}
"17
[v _packReturnData `(i ~T0 @X0 1 sf5`*uc`i`*S7`i`i ]
{
[; ;brain_rover.c: 17: static int packReturnData(char* data, int payloadLen, RoverMsg* msg, int maxout, int sensorID) {
[e :U _packReturnData ]
[v _data `*uc ~T0 @X0 1 r1 ]
[v _payloadLen `i ~T0 @X0 1 r2 ]
[v _msg `*S7 ~T0 @X0 1 r3 ]
[v _maxout `i ~T0 @X0 1 r4 ]
[v _sensorID `i ~T0 @X0 1 r5 ]
[f ]
[; ;brain_rover.c: 18: if (payloadLen + 3 >= maxout) {
"18
[e $ ! >= + _payloadLen -> 3 `i _maxout 10  ]
{
[; ;brain_rover.c: 19: return 0;
"19
[e ) -> 0 `i ]
[e $UE 9  ]
"20
}
[e :U 10 ]
[; ;brain_rover.c: 20: }
[; ;brain_rover.c: 22: msg->flags = 1;
"22
[e = . *U _msg 0 -> -> 1 `i `uc ]
[; ;brain_rover.c: 23: msg->sensorID = sensorID;
"23
[e = . *U _msg 1 -> _sensorID `uc ]
[; ;brain_rover.c: 24: msg->payloadLen = payloadLen;
"24
[e = . *U _msg 2 -> _payloadLen `uc ]
"26
[v _dest `*uc ~T0 @X0 1 a ]
[; ;brain_rover.c: 26: char* dest = msg->payload;
[e = _dest &U . *U _msg 3 ]
"27
[v _end `*uc ~T0 @X0 1 a ]
[; ;brain_rover.c: 27: char* end = dest + payloadLen;
[e = _end + _dest * -> _payloadLen `x -> -> # *U _dest `i `x ]
[; ;brain_rover.c: 28: while (dest != end) {
"28
[e $U 11  ]
[e :U 12 ]
{
[; ;brain_rover.c: 29: *dest++ = *data++;
"29
[e = *U ++ _dest * -> -> 1 `i `x -> -> # *U _dest `i `x *U ++ _data * -> -> 1 `i `x -> -> # *U _data `i `x ]
"30
}
[e :U 11 ]
"28
[e $ != _dest _end 12  ]
[e :U 13 ]
[; ;brain_rover.c: 30: }
[; ;brain_rover.c: 31: return payloadLen + 3;
"31
[e ) + _payloadLen -> 3 `i ]
[e $UE 9  ]
[; ;brain_rover.c: 32: }
"32
[e :UE 9 ]
}
"38
[v _packADData `(i ~T0 @X0 1 ef4`*S1`i`*uc`i ]
{
[; ;brain_rover.c: 38: int packADData(sensorADData* data, int len, char* out, int maxout) {
[e :U _packADData ]
[v _data `*S1 ~T0 @X0 1 r1 ]
[v _len `i ~T0 @X0 1 r2 ]
[v _out `*uc ~T0 @X0 1 r3 ]
[v _maxout `i ~T0 @X0 1 r4 ]
[f ]
[; ;brain_rover.c: 39: return packReturnData((char*)data, len*sizeof(sensorADData), (RoverMsg*)out, maxout, 0);
"39
[e ) ( _packReturnData (4 , , , , -> _data `*uc -> * -> _len `ui -> # `S1 `ui `i -> _out `*S7 _maxout -> 0 `i ]
[e $UE 14  ]
[; ;brain_rover.c: 40: }
"40
[e :UE 14 ]
}
"42
[v _unpackBrainMsg `(*S5 ~T0 @X0 1 ef1`*uc ]
{
[; ;brain_rover.c: 42: BrainMsg* unpackBrainMsg(char *buf){
[e :U _unpackBrainMsg ]
[v _buf `*uc ~T0 @X0 1 r1 ]
[f ]
[; ;brain_rover.c: 43: return (BrainMsg*) buf;
"43
[e ) -> _buf `*S5 ]
[e $UE 15  ]
[; ;brain_rover.c: 44: }
"44
[e :UE 15 ]
}
"47
[v _unpackRoverMsg `(i ~T0 @X0 1 ef3`*uc`i`*S6 ]
{
[; ;brain_rover.c: 47: int unpackRoverMsg(char* in, int len, RoverMsgRouter* handler) {
[e :U _unpackRoverMsg ]
[v _in `*uc ~T0 @X0 1 r1 ]
[v _len `i ~T0 @X0 1 r2 ]
[v _handler `*S6 ~T0 @X0 1 r3 ]
[f ]
[v _msg `*S7 ~T0 @X0 1 a ]
[; ;brain_rover.c: 48: RoverMsg* msg = (RoverMsg*)in;
"48
[e = _msg -> _in `*S7 ]
[; ;brain_rover.c: 49: len -= sizeof(RoverMsg);
"49
[e =- _len -> -> # `S7 `ui `i ]
[; ;brain_rover.c: 51: if (len != msg->payloadLen) return 3;
"51
[e $ ! != _len -> . *U _msg 2 `i 17  ]
[e ) -> 3 `i ]
[e $UE 16  ]
[e :U 17 ]
[; ;brain_rover.c: 53: if (msg->flags & 1) {
"53
[e $ ! != & -> . *U _msg 0 `i -> 1 `i -> 0 `i 18  ]
{
[; ;brain_rover.c: 54: switch (msg->sensorID) {
"54
[e $U 20  ]
{
[; ;brain_rover.c: 55: case 0:
"55
[e :U 21 ]
[; ;brain_rover.c: 56: return handler->adFunc((sensorADData*)(msg->payload), len/sizeof(sensorADData));
"56
[e ) ( *U . *U _handler 0 (2 , -> &U . *U _msg 3 `*S1 -> / -> _len `ui -> # `S1 `ui `i ]
[e $UE 16  ]
[; ;brain_rover.c: 57: default:
"57
[e :U 22 ]
[; ;brain_rover.c: 59: return 2;
"59
[e ) -> 2 `i ]
[e $UE 16  ]
"60
}
[; ;brain_rover.c: 60: }
[e $U 19  ]
"54
[e :U 20 ]
[e [\ . *U _msg 1 , $ -> -> 0 `i `uc 21
 22 ]
"60
[e :U 19 ]
"61
}
[; ;brain_rover.c: 61: } else {
[e $U 23  ]
[e :U 18 ]
{
[; ;brain_rover.c: 63: return 1;
"63
[e ) -> 1 `i ]
[e $UE 16  ]
"64
}
[e :U 23 ]
[; ;brain_rover.c: 64: }
[; ;brain_rover.c: 65: }
"65
[e :UE 16 ]
}
